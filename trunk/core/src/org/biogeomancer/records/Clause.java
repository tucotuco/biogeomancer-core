/* 
 *
 * This file is part of BioGeomancer.
 *  BioGeomancer is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  any later version.
 *
 *  BioGeomancer is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BioGeomancer; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package org.biogeomancer.records;
import java.util.ArrayList;

import org.biogeomancer.managers.DatumManager;
import org.biogeomancer.utils.Coordinate;
import org.biogeomancer.utils.PointRadius;
import org.biogeomancer.utils.SupportedLanguages;

import com.thoughtworks.xstream.XStream;

public class Clause // represents information about one atomic interpretable unit (Clause) of a Rec.
{
	public ClauseState state;           // maintains the processing state of the Clause
	public String locType;              // locality type
	public ArrayList<LocSpec> locspecs; // generated by locality interp manager
	public ArrayList<Georef> georefs;   // generated by shape manager
	public String iLocality;            // the standardized, interpreted version of the locality clause
	public String uLocality;            // the uninterpreted verbatim version of the locality clause
	public SupportedLanguages interpretedInLanguage; // the language in which the clause was successfully interpreted. Should be set by the interpreter.
	
	public Clause(){
		this.locspecs = new ArrayList();
		this.georefs = new ArrayList();
		this.state = ClauseState.CLAUSE_CREATED;
	}
	public int viableGeorefCount(){
		if( georefs==null || georefs.size() ==0 ) return 0;
		int count = 0;
		for(int i=0;i<georefs.size();i++){
			if( georefs.get(i).state==GeorefState.GEOREF_COMPLETED) count++;
		}
		return count;
	}
	public String makeInterpretedLocality(FeatureInfo fi1, FeatureInfo fi2){
		if(locType==null || locType.length()==0){
			iLocality=null;
			return null;
		}
		if( locType.equalsIgnoreCase("UNK") ){
			iLocality = new String(uLocality+" (not interpreted)");
			return iLocality;
		}
		if( locType.equalsIgnoreCase("NN") ){
			iLocality = new String("locality not recorded");
			return iLocality;
		}
		if( locspecs==null || locspecs.size()==0) return null;
		if( locType.equalsIgnoreCase("F") 
				|| locType.equalsIgnoreCase("P") 
				|| locType.equalsIgnoreCase("Q") 
				|| locType.equalsIgnoreCase("TRS")
				|| locType.equalsIgnoreCase("ADM") ){
			if( fi1.name == null ) {
				iLocality=null;
				return null;
			}
//			iLocality = new String(fi1.name+" ("+fi1.classificationTerm+")");
			iLocality = new String(fi1.name+" ("+fi1.featureID+")");
//			iLocality = new String(fi1.name);
		} else if( locType.equalsIgnoreCase("FOH") 
				|| locType.equalsIgnoreCase("POH")){ 
			if( fi1.name == null ) {
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffset+" "
					+locspecs.get(0).ioffsetunit+" "
					+locspecs.get(0).iheading+" of "
					+fi1.name);
//			+fi1.name+" ("+fi1.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("NF") 
				|| locType.equalsIgnoreCase("NP") ){
			if( fi1.name == null ) { 
				iLocality=null;
				return null;
			}
			iLocality = new String("near "+fi1.name);
		} else if( locType.equalsIgnoreCase("FS") 
				|| locType.equalsIgnoreCase("TRSS")
				|| locType.equalsIgnoreCase("PS")){
			if( fi1.name == null ) {
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).isubdivision+
					" (subdivision of) "+fi1.name);
//			" (subdivision of) "+fi1.name+" ("+fi1.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("FOO") ){
			if( fi1.name == null ) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffsetew+" "
					+locspecs.get(0).ioffsetewunit+" "
					+locspecs.get(0).iheadingew+" and "
					+locspecs.get(0).ioffsetns+" "
					+locspecs.get(0).ioffsetnsunit+" "
					+locspecs.get(0).iheadingns+" of "
					+fi1.name);
//			+fi1.name+" ("+fi1.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("BF") 
				||  locType.equalsIgnoreCase("BP") ){
			if( fi1.name == null || fi2.name == null) {
				iLocality=null;
				return null;
			}
			iLocality = new String("between "+fi1.name+" and "+fi2.name);
//			iLocality = new String("between "+fi1.name+" ("+fi1.classificationTerm+")"+" and "+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("FH") 
				|| locType.equalsIgnoreCase("PH")){
			if( fi1.name == null ) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).iheading+" of "+
					fi1.name);
//			fi1.name+" ("+fi1.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("FO") 
				|| locType.equalsIgnoreCase("PO")){
			if( fi1.name == null ) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffset+" "
					+locspecs.get(0).ioffsetunit+" from "
					+fi1.name);
//			+fi1.name+" ("+fi1.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("FPOH") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffset+" "
					+locspecs.get(0).ioffsetunit+" "
					+locspecs.get(0).iheading+" of "
					+fi1.name+" along "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" along "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("J") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String("intersection of "
					+fi1.name+" and "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" and "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("JO") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffset+" "
					+locspecs.get(0).ioffsetunit+" from the intersection of "
					+fi1.name+" and "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" and "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("JH") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).iheading+" of the intersection of "
					+fi1.name+" and "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" and "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("JOH") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffset+" "
					+locspecs.get(0).ioffsetunit+" "
					+locspecs.get(0).iheading+" of the intersection of "
					+fi1.name+" and "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" and "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("JOO") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffsetew+" "
					+locspecs.get(0).ioffsetewunit+" "
					+locspecs.get(0).iheadingew+" and "
					+locspecs.get(0).ioffsetns+" "
					+locspecs.get(0).ioffsetnsunit+" "
					+locspecs.get(0).iheadingns+" of the intersection of "
					+fi1.name+" and "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" and "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("JPOH") ){ 
			if( fi1.name == null || fi2.name == null) {
				iLocality=null;
				return null;
			}
			iLocality = new String(locspecs.get(0).ioffset+" "
					+locspecs.get(0).ioffsetunit+" "
					+locspecs.get(0).iheading+" of the intersection of "
					+fi1.name+" and  "
					+fi2.name+" along  "
					+fi2.name);
		} else if( locType.equalsIgnoreCase("NJ") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String("near the intersection of "
					+fi1.name+" and "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" and "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("ADDR") ){
			if( fi1.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality=fi1.name;
		} else if( locType.equalsIgnoreCase("E") ){ 
			if( locspecs.get(0).ielevation == null || locspecs.get(0).ielevationunits == null) { 
				iLocality=null;
				return null;
			}
			iLocality=new String("Elevation: "+locspecs.get(0).ielevation+" "+
					locspecs.get(0).ielevationunits);
		} else if( locType.equalsIgnoreCase("LL") ){ 
			if( locspecs.get(0).ilat == null || locspecs.get(0).ilng == null) { 
				iLocality=null;
				return null;
			}
			iLocality=new String("Lat/Long: "+locspecs.get(0).ilat+" "+locspecs.get(0).ilng);
		} else if( locType.equalsIgnoreCase("NPOM") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String("near the marker "
					+fi1.name+" on "
					+fi2.name);
//			+fi1.name+" ("+fi1.classificationTerm+")"+" on "
//			+fi2.name+" ("+fi2.classificationTerm+")");
		} else if( locType.equalsIgnoreCase("POM") ){ 
			if( fi1.name == null || fi2.name == null) { 
				iLocality=null;
				return null;
			}
			iLocality = new String("at the marker "
					+fi1.name+" on "
					+fi2.name);
		} else if( locType.equalsIgnoreCase("UTM") ){ 
			if( locspecs.get(0).iutmzone == null || locspecs.get(0).iutme == null || locspecs.get(0).iutmn == null) { 
				iLocality=null;
				return null;
			}
			iLocality=new String("UTM: "+locspecs.get(0).iutmzone+" "+
					locspecs.get(0).iutme+" "+locspecs.get(0).iutmn);
		} else { // didn't process this loctype
			iLocality=new String("locality type "+locType+" not interpreted");
		}            
		return iLocality;
	}
	public String toMarkup(){
		String s = new String("<CLAUSE>");
		if(this.locspecs==null || this.locspecs.isEmpty()){
			s=s.concat("<locspec failure>");
		}else{
			if(locType==null){
				s=s.concat("<loctype failure>");
			}else{
				s=s.concat("<"+locType.toUpperCase()+">");
				if(locType.toUpperCase().equals("F") || 
						locType.toUpperCase().equals("P") ||
						locType.toUpperCase().equals("NF") ||
						locType.toUpperCase().equals("NP") ||
						locType.toUpperCase().equals("Q") ||
						locType.toUpperCase().equals("ADM") ||
						locType.toUpperCase().equals("ADDR")
				){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
				}else if(locType.toUpperCase().equals("POM") ||
						locType.toUpperCase().equals("NPOM")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.get(0).vsubdivision==null){
						s=s.concat("<subdivision></subdivision>");
					}else{
						s=s.concat("<subdivision>"+this.locspecs.get(0).vsubdivision.trim()+"</subdivision>");
					}
				}else if(locType.toUpperCase().equals("TRS") ||
						locType.toUpperCase().equals("TRSS") ){
					s=s.concat("<township>"+this.locspecs.get(0).vtownship+"</township>");
					s=s.concat("<townshipdir>"+this.locspecs.get(0).vtownshipdir+"</townshipdir>");
					s=s.concat("<range>"+this.locspecs.get(0).vrange+"</range>");
					s=s.concat("<rangedir>"+this.locspecs.get(0).vrangedir+"</rangedir>");
					s=s.concat("<section>"+this.locspecs.get(0).vsection+"</section>");
					if(locType.toUpperCase().equals("TRSS")){
						if(this.locspecs.get(0).vsubdivision==null){
							s=s.concat("<subdivision></subdivision>");
						}else{
							s=s.concat("<subdivision>"+this.locspecs.get(0).vsubdivision.trim()+"</subdivision>");
						}
					}
				}else if(locType.toUpperCase().equals("UTM")){
					s=s.concat("<utmzone>"+this.locspecs.get(0).vutmzone+"</utmzone>");
					s=s.concat("<utme>"+this.locspecs.get(0).vutme+"</utme>");
					s=s.concat("<utmn>"+this.locspecs.get(0).vutmn+"</utmn>");
				}else if(locType.toUpperCase().equals("NN") ||
						locType.toUpperCase().equals("UNK")){
					if(this.uLocality != null) s=s.concat(this.uLocality);
				}else if(locType.toUpperCase().equals("E")){
					s=s.concat("<elevation>"+this.locspecs.get(0).velevation+"</elevation>");
					s=s.concat("<elevationunits>"+this.locspecs.get(0).velevationunits+"</elevationunits>");
				}else if(locType.toUpperCase().equals("LL")){
					s=s.concat("<latitude>"+this.locspecs.get(0).vlat+"</latitude>");
					s=s.concat("<longitude>"+this.locspecs.get(0).vlng+"</longitude>");
				}else if(locType.toUpperCase().equals("FOH")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
				}else if(locType.toUpperCase().equals("POH")){
					s=s.concat("<path>"+this.locspecs.get(0).featurename+"</path>");
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
				}else if(locType.toUpperCase().equals("FO")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
				}else if(locType.toUpperCase().equals("PO")){
					s=s.concat("<path>"+this.locspecs.get(0).featurename+"</path>");
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
				}else if(locType.toUpperCase().equals("FH")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
				}else if(locType.toUpperCase().equals("PH")){
					s=s.concat("<path>"+this.locspecs.get(0).featurename+"</path>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
				}else if(locType.toUpperCase().equals("FS")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.get(0).vsubdivision==null){
						s=s.concat("<subdivision></subdivision>");
					}else{
						s=s.concat("<subdivision>"+this.locspecs.get(0).vsubdivision.trim()+"</subdivision>");
					}
				}else if(locType.toUpperCase().equals("PS")){
					s=s.concat("<path>"+this.locspecs.get(0).featurename+"</path>");
					if(this.locspecs.get(0).vsubdivision==null){
						s=s.concat("<subdivision></subdivision>");
					}else{
						s=s.concat("<subdivision>"+this.locspecs.get(0).vsubdivision.trim()+"</subdivision>");
					}
				}else if(locType.toUpperCase().equals("FOO")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					s=s.concat("<offsetew>"+this.locspecs.get(0).voffsetew+"</offsetew>");
					s=s.concat("<offsetewunit>"+this.locspecs.get(0).voffsetewunit+"</offsetewunit>");
					s=s.concat("<headingew>"+this.locspecs.get(0).vheadingew+"</headingew>");
					s=s.concat("<offsetns>"+this.locspecs.get(0).voffsetns+"</offsetns>");
					s=s.concat("<offsetnsunit>"+this.locspecs.get(0).voffsetnsunit+"</offsetnsunit>");
					s=s.concat("<headingns>"+this.locspecs.get(0).vheadingns+"</headingns>");
				}else if(locType.toUpperCase().equals("BF") 
						|| locType.toUpperCase().equals("BP")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.size()>1){
						s=s.concat("<feature2>"+this.locspecs.get(1).featurename+"</feature2>");
					}
				}else if(locType.toUpperCase().equals("J") 
						|| locType.toUpperCase().equals("NJ")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.size()>1){
						s=s.concat("<feature2>"+this.locspecs.get(1).featurename+"</feature2>");
					}
				}else if(locType.toUpperCase().equals("JH")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.size()>1){
						s=s.concat("<feature2>"+this.locspecs.get(1).featurename+"</feature2>");
					}
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
				}else if(locType.toUpperCase().equals("JO")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.size()>1){
						s=s.concat("<feature2>"+this.locspecs.get(1).featurename+"</feature2>");
					}
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
				}else if(locType.toUpperCase().equals("JOH")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.size()>1){
						s=s.concat("<feature2>"+this.locspecs.get(1).featurename+"</feature2>");
					}
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
				}else if(locType.toUpperCase().equals("FPOH")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
					if(this.locspecs.size()>1){
						s=s.concat("<path>"+this.locspecs.get(1).featurename+"</path>");
					}
				}else if(locType.toUpperCase().equals("JPOH")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					s=s.concat("<offset>"+this.locspecs.get(0).voffset+"</offset>");
					s=s.concat("<offsetunit>"+this.locspecs.get(0).voffsetunit+"</offsetunit>");
					s=s.concat("<heading>"+this.locspecs.get(0).vheading+"</heading>");
					if(this.locspecs.size()>1){
						s=s.concat("<path>"+this.locspecs.get(1).featurename+"</path>");
					}
				}else if(locType.toUpperCase().equals("JOO")){
					s=s.concat("<feature>"+this.locspecs.get(0).featurename+"</feature>");
					if(this.locspecs.size()>1){
						s=s.concat("<feature2>"+this.locspecs.get(1).featurename+"</feature2>");
					}
					s=s.concat("<offsetew>"+this.locspecs.get(0).voffsetew+"</offsetew>");
					s=s.concat("<offsetewunit>"+this.locspecs.get(0).voffsetewunit+"</offsetewunit>");
					s=s.concat("<headingew>"+this.locspecs.get(0).vheadingew+"</headingew>");
					s=s.concat("<offsetns>"+this.locspecs.get(0).voffsetns+"</offsetns>");
					s=s.concat("<offsetnsunit>"+this.locspecs.get(0).voffsetnsunit+"</offsetnsunit>");
					s=s.concat("<headingns>"+this.locspecs.get(0).vheadingns+"</headingns>");
				}
				s=s.concat("</"+locType.toUpperCase()+">");
			}
		}
		s=s.concat("</CLAUSE>");
		return s;
	}
	public String toString(){
		String s = new String("<CLAUSE>\n");
		s=s.concat("Clause state: "+state+ "\n");
	
		s=s.concat("Locality Type: ");
		if( locType != null ) {
			s=s.concat(locType.toUpperCase() + "\n");
		}	else s=s.concat("not given\n");
	
		s=s.concat("Original Clause: ");
		if( uLocality != null && uLocality.trim().length()>0) {
			s=s.concat(uLocality + "\n");
		}	else s=s.concat("not given\n");
	
		s=s.concat("Interpreted Clause: ");
		if( iLocality != null && iLocality.trim().length()>0) {
			s=s.concat(iLocality + "\n");
		}	else s=s.concat("not given\n");
	
		s=s.concat("<LOCSPECS>\n");
		for( LocSpec locspec: this.locspecs) { // print out each locspec
			s=s.concat(locspec.toString());
		}
		s=s.concat("</LOCSPECS>\n");
	
		if( this.georefs == null || this.georefs.size() == 0){
			s=s.concat("Clause georef count: 0\n<CLAUSEGEOREFS>\n");
		}else {
			s=s.concat("Clause georef count: "+this.georefs.size() + "\n<CLAUSEGEOREFS>\n");
			for( Georef georef: this.georefs) { // print out each georef
				s=s.concat(georef.toString());
			}
		}
		s=s.concat("</CLAUSEGEOREFS>\n</CLAUSE>\n");
		return s;
	}
	public String toXML(boolean showgeom){
//		XStream xstream = new XStream();
//		xstream.alias("LOCSPECS", LocSpec.class);
//		xstream.alias("CLAUSEGEOREFS", Georef.class);
//		String xml = xstream.toXML(this);
//		return xml;
		String s = new String("<CLAUSE>\n");
		if( locType != null ) {
			s=s.concat("<LOCTYPE>"+locType.toUpperCase()+"</LOCTYPE>\n");
		} else{
			s=s.concat("<LOCTYPE></LOCTYPE>\n");
		}

		if( uLocality != null && uLocality.trim().length()>0) {
			s=s.concat("<ORIG_LOCALITY>"+uLocality+"</ORIG_LOCALITY>\n");
		} else{
			s=s.concat("<ORIG_LOCALITY></ORIG_LOCALITY>\n");
		}

		if( iLocality != null && iLocality.trim().length()>0) {
			s=s.concat("<INTERPRETED_LOCALITY>"+iLocality+"</INTERPRETED_LOCALITY>\n");
		} else{
			s=s.concat("<INTERPRETED_LOCALITY></INTERPRETED_LOCALITY>\n");
		}
		
		if(interpretedInLanguage == SupportedLanguages.english){
			s=s.concat("<LANGUAGE>English</LANGUAGE>\n");
		} else if (interpretedInLanguage == SupportedLanguages.spanish){
			s=s.concat("<LANGUAGE>Español</LANGUAGE>\n");
		} else if (interpretedInLanguage == SupportedLanguages.portuguese){
			s=s.concat("<LANGUAGE>Português</LANGUAGE>\n");
		} else if (interpretedInLanguage == SupportedLanguages.french){
			s=s.concat("<LANGUAGE>Français</LANGUAGE>\n");
		} else if (interpretedInLanguage == SupportedLanguages.dutch){
			s=s.concat("<LANGUAGE>Nederlands</LANGUAGE>\n");
		} else {
			s=s.concat("<LANGUAGE>not specified</LANGUAGE>\n");
		}

		s=s.concat("<LOCSPECS>\n");
		for( LocSpec locspec: this.locspecs) {
			s=s.concat(locspec.toXML(showgeom));
		}
		s=s.concat("</LOCSPECS>\n");

		s=s.concat("<CLAUSE_GEOREFS>\n");
		if( this.georefs != null ){
			for( Georef georef: this.georefs) {
				s=s.concat(georef.toXML(showgeom));
			}
		}
		s=s.concat("</CLAUSE_GEOREFS>\n");

		s=s.concat("<CLAUSE_STATE>"+state+"</CLAUSE_STATE>\n");
		s=s.concat("</CLAUSE>\n");
		return s;
	}
}