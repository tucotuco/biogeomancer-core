/**
 * Copyright 2007 University of California at Berkeley.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3
package edu.tulane.geolocate;

import javax.xml.namespace.QName;

import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.DeserializationException;
import com.sun.xml.rpc.encoding.Initializable;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPSerializationContext;
import com.sun.xml.rpc.encoding.SerializationException;
import com.sun.xml.rpc.encoding.literal.LiteralObjectSerializerBase;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.streaming.XMLReaderUtil;
import com.sun.xml.rpc.streaming.XMLWriter;

public class FindWaterBodiesWithinLocality_LiteralSerializer extends
    LiteralObjectSerializerBase implements Initializable {
  private static final javax.xml.namespace.QName ns1_LocalityDescription_QNAME = new QName(
      "http://www.museum.tulane.edu/webservices/", "LocalityDescription");
  private static final javax.xml.namespace.QName ns1_LocalityDescription_TYPE_QNAME = new QName(
      "http://www.museum.tulane.edu/webservices/", "LocalityDescription");
  private CombinedSerializer ns1_myLocalityDescription_LiteralSerializer;

  public FindWaterBodiesWithinLocality_LiteralSerializer(
      javax.xml.namespace.QName type, java.lang.String encodingStyle) {
    this(type, encodingStyle, false);
  }

  public FindWaterBodiesWithinLocality_LiteralSerializer(
      javax.xml.namespace.QName type, java.lang.String encodingStyle,
      boolean encodeType) {
    super(type, true, encodingStyle, encodeType);
  }

  public java.lang.Object doDeserialize(XMLReader reader,
      SOAPDeserializationContext context) throws java.lang.Exception {
    edu.tulane.geolocate.FindWaterBodiesWithinLocality instance = new edu.tulane.geolocate.FindWaterBodiesWithinLocality();
    java.lang.Object member = null;
    javax.xml.namespace.QName elementName;
    java.util.List values;
    java.lang.Object value;

    reader.nextElementContent();
    elementName = reader.getName();
    if (reader.getState() == XMLReader.START) {
      if (elementName.equals(ns1_LocalityDescription_QNAME)) {
        member = ns1_myLocalityDescription_LiteralSerializer.deserialize(
            ns1_LocalityDescription_QNAME, reader, context);
        if (member == null) {
          throw new DeserializationException("literal.unexpectedNull");
        }
        instance
            .setLocalityDescription((edu.tulane.geolocate.LocalityDescription) member);
        reader.nextElementContent();
      } else {
        throw new DeserializationException("literal.unexpectedElementName",
            new Object[] { ns1_LocalityDescription_QNAME, reader.getName() });
      }
    } else {
      throw new DeserializationException("literal.expectedElementName", reader
          .getName().toString());
    }

    XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
    return instance;
  }

  public void doSerialize(java.lang.Object obj, XMLWriter writer,
      SOAPSerializationContext context) throws java.lang.Exception {
    edu.tulane.geolocate.FindWaterBodiesWithinLocality instance = (edu.tulane.geolocate.FindWaterBodiesWithinLocality) obj;

    if (instance.getLocalityDescription() == null) {
      throw new SerializationException("literal.unexpectedNull");
    }
    ns1_myLocalityDescription_LiteralSerializer.serialize(instance
        .getLocalityDescription(), ns1_LocalityDescription_QNAME, null, writer,
        context);
  }

  public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer,
      SOAPSerializationContext context) throws java.lang.Exception {
    edu.tulane.geolocate.FindWaterBodiesWithinLocality instance = (edu.tulane.geolocate.FindWaterBodiesWithinLocality) obj;

  }

  public void initialize(InternalTypeMappingRegistry registry) throws Exception {
    ns1_myLocalityDescription_LiteralSerializer = (CombinedSerializer) registry
        .getSerializer("", edu.tulane.geolocate.LocalityDescription.class,
            ns1_LocalityDescription_TYPE_QNAME);
  }
}
