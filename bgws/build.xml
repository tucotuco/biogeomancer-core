<?xml version="1.0" encoding="utf-8" ?>
<project name="bgws" default="dist" basedir=".">
	
	<!--
		Important Notes:
		* Create ant.properties file from ant.properties-template file.
		* Tomcat tasks disallow using properties for manager username/password.
		* Requires at least GWT 1.4.59.
	-->
	
	<property file="ant.properties" />
	<property file="deploy.properties" />

	<!--
		Build properties.
	-->
	<property name="version" value="0.1" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="doc.dir" value="${basedir}/${build.dir}/doc" />
	<property name="dist.jar" value="biogeomancer-webservices-${version}.war" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="build.dir.gwt" value="${basedir}/gwt-build-dir" />
	<property name="gwt.entrypoint.class" value="edu.berkeley.biogeomancer.webservice.Client" />

	<!--
		Build paths.
	-->
	<path id="gwt.classpath">
		<pathelement location="${src.dir}" />
		<pathelement location="${gwt.user.jar}" />
		<pathelement location="${gwt.dev.jar}" />
	</path>
	<path id="lib.path">
		<pathelement location="${gwt.user.jar}" />
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!--
		Tomcat tasks.
	-->
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" />
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask" />
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" />
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" />

	<!--
		Creates the web deployment directory tree, copies jar files to WEB-INF/lib,
		and copies web.xml to WEB-INF.
	-->
	<target name="init" depends="clean">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/WEB-INF" />
		<mkdir dir="${build.dir}/WEB-INF/lib" />
		<mkdir dir="${build.dir}/WEB-INF/classes" />
		<mkdir dir="${build.dir}/${doc.dir}" />
		<copy todir="${build.dir}/WEB-INF/lib">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<copy file="${gwt.servlet.jar}" todir="${build.dir}/WEB-INF/lib" />
		<copy todir="${build.dir}/WEB-INF">
			<fileset dir="${basedir}">
				<include name="web.xml" />
			</fileset>
		</copy>
	</target>

	<!--
		Deletes build and web directories.
	-->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${build.dir.gwt}" />
		<delete dir="${dist.dir}" />
	</target>

	<!--
		Compiles client code using GWTCompiler into the gwt build directory, then
		copies it over to the build directory.
	-->
	<target name="gwt_build">
		<java classpathref="gwt.classpath" classname="com.google.gwt.dev.GWTCompiler" fork="true" failonerror="true">
			<arg line="-logLevel INFO" />
			<arg line="-style PRETTY" />
			<arg line='-out "${build.dir.gwt}"' />
			<arg value="${gwt.entrypoint.class}" />
		</java>
		<copy todir="${build.dir}">
			<fileset dir="${build.dir.gwt}/${gwt.entrypoint.class}" />
		</copy>
	</target>

	<!--
		Compiles the Java code into WEB-INF/classes (includes source code), then
		copies all resource files (properties, xml, etc) to WEB-INF/lib.
	-->
	<target name="build" depends="init">
		<javac deprecation="off" includeAntRuntime="yes" debug="on" srcdir="${src.dir}" destdir="${build.dir}/WEB-INF/classes">
			<include name="**/*.java" />
			<classpath refid="lib.path" />
		</javac>
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src.dir}">
				<include name="**/*.properties" />
				<include name="**/*.cfg" />
				<include name="**/*.cfg.xml" />
				<include name="**/*.hbm.xml" />
			</fileset>
		</copy>
	</target>

	<!-- ===================================================================
  -  setbuildstats - set the value of build info properties:
  -  build.date: current date formatted as YYYY-MM-DD
  -  build.date: current 24h time formatted as HH:MM:SS
  -  build.rev: RCS revision info, e.g. 'Revision: 14'
  -  loc: lines of code in all files ending with .java, .properties, or .xml
  -  =================================================================== -->
	<target name="setbuildstats">
		<exec spawn="false" failifexecutionfails="no" executable="${executable.date}" outputproperty="build.date">
			<arg value="+%F" />
		</exec>
		<exec spawn="false" failifexecutionfails="no" executable="${executable.date}" outputproperty="build.time">
			<arg value="+%T" />
		</exec>
		<exec spawn="false" failifexecutionfails="no" executable="${executable.svnversion}" outputproperty="build.rev">
		</exec>
		<exec spawn="false" failifexecutionfails="no" executable="${executable.sh}" outputproperty="loc">
			<arg value="-c" />
			<arg value="find . \( -name '*.java' -o -name '*.properties'  -o -name '*.xml' \) -print0 | xargs -0 wc -l | tail -n 1" />
		</exec>
		<exec spawn="false" failifexecutionfails="no" executable="${executable.sh}" outputproperty="changelog">
			<arg value="-c" />
			<arg value="svn log" />
		</exec>
	</target>

	<target name="version_replace" depends="init, setbuildstats">
		<replace file="${build.dir}/Client.html" token="%VERSION%" value="${version}" />
	</target>

	<!-- ===================================================================
  -  manifest - create manifest.mf with up-to-date version
  -  =================================================================== -->
	<target name="manifest">
		<filter token="version" value="${version}" />
		<copy file="manifest.template" tofile="manifest.mf" overwrite="true" filtering="true" />
	</target>

	<!-- ===================================================================
  -  dist - create distribution jar
  -  =================================================================== -->
	<target name="dist" depends="init, gwt_build, build, manifest, version_replace">
		<!--, manifest, version_replace"> -->
		<jar jarfile="${dist.dir}/${dist.jar}" manifest="manifest.mf">
			<fileset dir="${build.dir}" />
		</jar>
	</target>


	<!--
		Tomcat tasks.
	-->
	<target name="tomcat-reinstall" depends="tomcat-remove, tomcat-install" />
	<target name="tomcat-install">
		<deploy url="${tomcat.manager.url}" username="manager" password="tomcat" path="${tomcat.path}" war="file://${dist.dir}/${dist.jar}" />
	</target>

	<target name="tomcat-reload">
		<reload url="${manager.url}" username="${manager.username}" password="${manager.password}" path="${app.path}" />
	</target>

	<target name="tomcat-remove">
		<undeploy url="${tomcat.manager.url}" username="manager" password="tomcat" path="${tomcat.path}" />
	</target>

	<!-- ===================================================================
  -  javadoc - build javadoc 
  -  =================================================================== -->
	<target name="javadoc" depends="init">
		<javadoc destdir="${doc.dir}" access="private" use="true" notree="false" nonavbar="false" noindex="false" splitindex="true" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" packagenames="*" sourcepath="${src.dir}" doctitle="${project.name}">
			<classpath refid="lib.path" />
		</javadoc>
	</target>
</project>