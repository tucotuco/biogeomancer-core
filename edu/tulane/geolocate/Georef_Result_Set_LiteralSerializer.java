/**
 * Copyright 2007 University of California at Berkeley.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3
package edu.tulane.geolocate;

import java.util.ArrayList;

import javax.xml.namespace.QName;

import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.DeserializationException;
import com.sun.xml.rpc.encoding.Initializable;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPSerializationContext;
import com.sun.xml.rpc.encoding.SerializationException;
import com.sun.xml.rpc.encoding.literal.LiteralObjectSerializerBase;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.streaming.XMLReaderUtil;
import com.sun.xml.rpc.streaming.XMLWriter;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

public class Georef_Result_Set_LiteralSerializer extends
    LiteralObjectSerializerBase implements Initializable {
  private static final javax.xml.namespace.QName ns1_NumResults_QNAME = new QName(
      "http://www.museum.tulane.edu/webservices/", "NumResults");
  private static final javax.xml.namespace.QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
  private static final javax.xml.namespace.QName ns1_ExectutionTimems_QNAME = new QName(
      "http://www.museum.tulane.edu/webservices/", "ExectutionTimems");
  private static final javax.xml.namespace.QName ns2_double_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DOUBLE;
  private static final javax.xml.namespace.QName ns1_ResultSet_QNAME = new QName(
      "http://www.museum.tulane.edu/webservices/", "ResultSet");
  private static final javax.xml.namespace.QName ns1_Georef_Result_TYPE_QNAME = new QName(
      "http://www.museum.tulane.edu/webservices/", "Georef_Result");
  private CombinedSerializer ns2_myns2__int__int_Int_Serializer;
  private CombinedSerializer ns2_myns2__double__double_Double_Serializer;
  private CombinedSerializer ns1_myGeoref_Result_LiteralSerializer;

  public Georef_Result_Set_LiteralSerializer(javax.xml.namespace.QName type,
      java.lang.String encodingStyle) {
    this(type, encodingStyle, false);
  }

  public Georef_Result_Set_LiteralSerializer(javax.xml.namespace.QName type,
      java.lang.String encodingStyle, boolean encodeType) {
    super(type, true, encodingStyle, encodeType);
  }

  public java.lang.Object doDeserialize(XMLReader reader,
      SOAPDeserializationContext context) throws java.lang.Exception {
    edu.tulane.geolocate.Georef_Result_Set instance = new edu.tulane.geolocate.Georef_Result_Set();
    java.lang.Object member = null;
    javax.xml.namespace.QName elementName;
    java.util.List values;
    java.lang.Object value;

    reader.nextElementContent();
    elementName = reader.getName();
    if (reader.getState() == XMLReader.START) {
      if (elementName.equals(ns1_NumResults_QNAME)) {
        member = ns2_myns2__int__int_Int_Serializer.deserialize(
            ns1_NumResults_QNAME, reader, context);
        if (member == null) {
          throw new DeserializationException("literal.unexpectedNull");
        }
        instance.setNumResults(((java.lang.Integer) member).intValue());
        reader.nextElementContent();
      } else {
        throw new DeserializationException("literal.unexpectedElementName",
            new Object[] { ns1_NumResults_QNAME, reader.getName() });
      }
    } else {
      throw new DeserializationException("literal.expectedElementName", reader
          .getName().toString());
    }
    elementName = reader.getName();
    if (reader.getState() == XMLReader.START) {
      if (elementName.equals(ns1_ExectutionTimems_QNAME)) {
        member = ns2_myns2__double__double_Double_Serializer.deserialize(
            ns1_ExectutionTimems_QNAME, reader, context);
        if (member == null) {
          throw new DeserializationException("literal.unexpectedNull");
        }
        instance.setExectutionTimems(((Double) member).doubleValue());
        reader.nextElementContent();
      } else {
        throw new DeserializationException("literal.unexpectedElementName",
            new Object[] { ns1_ExectutionTimems_QNAME, reader.getName() });
      }
    } else {
      throw new DeserializationException("literal.expectedElementName", reader
          .getName().toString());
    }
    elementName = reader.getName();
    if ((reader.getState() == XMLReader.START)
        && (elementName.equals(ns1_ResultSet_QNAME))) {
      values = new ArrayList();
      for (;;) {
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START)
            && (elementName.equals(ns1_ResultSet_QNAME))) {
          value = ns1_myGeoref_Result_LiteralSerializer.deserialize(
              ns1_ResultSet_QNAME, reader, context);
          if (value == null) {
            throw new DeserializationException("literal.unexpectedNull");
          }
          values.add(value);
          reader.nextElementContent();
        } else {
          break;
        }
      }
      member = new edu.tulane.geolocate.Georef_Result[values.size()];
      member = values.toArray((Object[]) member);
      instance.setResultSet((edu.tulane.geolocate.Georef_Result[]) member);
    } else {
      instance.setResultSet(new edu.tulane.geolocate.Georef_Result[0]);
    }

    XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
    return instance;
  }

  public void doSerialize(java.lang.Object obj, XMLWriter writer,
      SOAPSerializationContext context) throws java.lang.Exception {
    edu.tulane.geolocate.Georef_Result_Set instance = (edu.tulane.geolocate.Georef_Result_Set) obj;

    if (new java.lang.Integer(instance.getNumResults()) == null) {
      throw new SerializationException("literal.unexpectedNull");
    }
    ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance
        .getNumResults()), ns1_NumResults_QNAME, null, writer, context);
    if (new Double(instance.getExectutionTimems()) == null) {
      throw new SerializationException("literal.unexpectedNull");
    }
    ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance
        .getExectutionTimems()), ns1_ExectutionTimems_QNAME, null, writer,
        context);
    if (instance.getResultSet() != null) {
      for (int i = 0; i < instance.getResultSet().length; ++i) {
        ns1_myGeoref_Result_LiteralSerializer.serialize(
            instance.getResultSet()[i], ns1_ResultSet_QNAME, null, writer,
            context);
      }
    }
  }

  public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer,
      SOAPSerializationContext context) throws java.lang.Exception {
    edu.tulane.geolocate.Georef_Result_Set instance = (edu.tulane.geolocate.Georef_Result_Set) obj;

  }

  public void initialize(InternalTypeMappingRegistry registry) throws Exception {
    ns2_myns2__int__int_Int_Serializer = (CombinedSerializer) registry
        .getSerializer("", int.class, ns2_int_TYPE_QNAME);
    ns2_myns2__double__double_Double_Serializer = (CombinedSerializer) registry
        .getSerializer("", double.class, ns2_double_TYPE_QNAME);
    ns1_myGeoref_Result_LiteralSerializer = (CombinedSerializer) registry
        .getSerializer("", edu.tulane.geolocate.Georef_Result.class,
            ns1_Georef_Result_TYPE_QNAME);
  }
}
